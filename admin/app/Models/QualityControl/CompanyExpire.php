<?php
// 企业到期配置

namespace App\Models\QualityControl;

class CompanyExpire extends BasePublicModel
{
    //****************数据据缓存**相关的***开始********************************************
//    public static $cachePre = 'cacheDB';// 缓存键最前面的关键字  cacheDb:U:{id值}_{email值}  中的 cacheDb
//    public static $separatoChar = '__';// 缓存相关的分隔符-主要是键;注意合法性，会作为redis键的一部分
//    public static $cacheTimeTableKey = 'Ttbl';// 缓存表更新时间时的缓存关键字
//    public static $cacheTimeBlockKey = 'Tblock';// 缓存块更新时间时的缓存关键字
//    public static $cacheTimeInfoKey = 'Tinfo';// 缓存表具体详情更新时间时的缓存关键字
//    public static $cacheInfoKey = 'info';// 缓存表具体详情数据的缓存关键字
//    public static $cachePrimaryValInfoKey = 'TpriVal';// 缓存表其它缓存字段缓存主键值的缓存关键字
//    public static $operateRedis = 2;// 操作 1 转为json 2 序列化 ; 3 不转换 ---最好用2 序列化，不然可能会有问题
//    public static $cacheExpire = 60 * 60 * 24 * 10;// 10 天 缓存的时间长度 ; 值<= 0时，会使用 public.DBDataCache.expire 配置

    // 1 缓存详情 2缓存块[确定没有用到关系的块，可以缓存]
    //  public.DBDataCache.cacheType 配置打开，且各模型也打开才会有对应缓存
    public static $cacheType = (1 | 2);// 0
    // 最大缓存数据行数，如果>此值的数据不缓存。; 值<= 0时，会使用 public.DBDataCache.maxCacheRows 配置
    public static $maxCacheRows = 0;

//    public static $cacheSimple = 'U';// 表名简写,为空，则使用表名

    public static $cacheVersion = '';// 内容随意改[可0{空默认为0}开始自增]- 如果运行过程中，有直接对表记录进行修改，增加或修改字段名，则修改此值，使表记录的相关缓存过期。
    // $cacheExcludeFields 为空：则缓存所有字段值；排除字段可能是大小很大的字段，不适宜进行缓存
    public static $cacheExcludeFields = [];// 表字段中排除字段; 有值：要小心，如果想获取的字段有在排除字段中的，则不能使用缓存


//    public static $cachePrimaryFields = 'id';//格式 '字段a ' 或 一维数组 ['字段b','字段c',....] 为空，则通过 表的主键缓存，再没有就不缓存

    // 可作为单条记录缓存的字段 格式 ['e' => '字段a ', 'm' => ['字段b','字段c',....] 值需要作为缓存键的字段，缓存值为指向 id 字段
    // 多字段的数组为 层级关系，如：从左到右为 第一层[城市站缓存]、第二层[代理站缓存]、第三层[商家站缓存]、第四层[店铺站缓存]...
    public static $cachePrimaryKeyFields = [];

    // 此属性有值；则是多情况（多种平台应该；如按城市分站）缓存，为空：系统/公用类别的缓存
    // 块数据缓存时，需要标记缓存的字段 格式 ['e' => '字段a ', 'm' => ['字段b','字段c',....] 值需要作为缓存键的字段
    // 多字段的数组为 层级关系，如：从左到右为 第一层[城市站缓存]、第二层[代理站缓存]、第三层[商家站缓存]、第四层[店铺站缓存]...
    // 为空，则表级缓存块
    // 有新下标加入或字段变动，所有缓存会自动失效。删除下标：不会影响已有缓存
    public static $cacheBlockFields = [];

    // 单位时间内，访问多少次，开启缓存--目的去掉冷数据 如：1分钟访问2次，则开启缓存
    // 值[] 空时，会使用 public.DBDataCache.openCache 配置
//    public static $openCache = [
//        'expire' => 60 * 3,// 单位时长，单位秒  建议：2-10分钟
//        'requestNum' => 3,// 访问次数
//    ];
    // 缓存自动延期设置 单位时间内访问多少次时，自动延长有效期 10分钟 8次 自动延长有效期 可延长3次
    // 值[] 空时，会使用 public.DBDataCache.extendExpire 配置
//    public static $extendExpire = [
//        'expire' => 60 * 3,// 单位时长，单位秒  建议：2-10分钟
//        'requestNum' => 8,// 访问次数
//        'maxExendNum' => 3,// 可延长3次
//    ];

    //****************数据据缓存**相关的***结束********************************************

    // public static $IntPriceFields = [];//[有则设置] 表中整型表示价格的字段数组 -- 一维数组，目的：方便统一把数据中的字段转浮点数或转整数
    // public static $IntPriceIndex = [];// $IntPriceFields 字段对应的扩大陪数；没有配置默认为2  扩大或缩小倍数： pow(10,2)；格式：['sl' => 2,]；注：2的可不用配置【只配置特殊的】，因为默认就是2

    // 自有属性
    // 0：都没有；
    // 1：有历史表 ***_history;
    // 2：有操作员工id 字段 operate_staff_id
    // 4：有操作员工历史id 字段 operate_staff_id_history
    // 8：有操作日期字段 created_at timestamp
    // 16：有更新日期字段 updated_at  timestamp
    // 32: 有历史表 ***_history; 且 此表实时记录主表数据 （实时数据[不会删除]  +  历史修改过程中的数据）--全表记录【所有记录及历史】--可追溯
    // 64: 有同步数据表 ***_doing;--业务进行表【轻量级表】，当业务进行中时，可直接操作进行表【提高数据操作的率】，
    //                  一旦业务完成，则删除进行表中的数据，原表作为原始数据使用
    //                  -- TODO 直接操作业务写到操作操作的底层 CommonDB 【存在就同步更新，不存在：业务已结束或不用进行表了】
    public static $ownProperty = (2 | 4 | 8 | 16);// (1 | 2 | 4 | 8 | 16);
    // 同步表后缀 => 同步权限 0/1:增、2改  ; 4：删 (1 | 2)：可做业务同步 ；(1 | 2 | 4)： 操作全同步表【含删除】）
    // 如果是空数组【没有配置】，默认为 ['doing' => (1 | 2 | 4)]
    public static $syncTables = [
        // 'doing' => (1 | 2 | 4),
    ];
    // 主键id的值类型：
    //      1自增id[默认]
    //      2计数器，缓存redis，自增，redis没有，则查表中最大值自增
    //      256 计数器，批量的，自动优先批量生成，在使用的过程中自动补充。--不浪费【没有使用的，自动回收重新历用】
    //      按时间生成 bigint类型
    //          按年的分钟数~~~~~~~直观年，但长度短小
    //          4一秒1  0000个   2【位】+6【位】+ 秒2【位】+自增数5【位】 = 15【位】 => 年【2位】+每年中第几分钟【60*24*365=525600 6位】+ 秒【2位】--长度15位
    //          8一分钟100 0000个   2【位】+6【位】+自增数6【位】 = 14【位】 => 年【2位】+每年中第几分钟【60*24*365=525600 6位】-- 长度 14位
    //          按年的天数~~~~~~~~~~~~~~~~直观年及年的第几天
    //          16 一秒1  0000个 年【2位】+ 日期[一年中的第几天 001-365] 3位 +每天中第几秒钟 一天中的第几秒   0-86400【5位】+自增数5【位】 --长度15位
    //          32 一分钟100 0000个 年【2位】+ 日期[一年中的第几天 001-365] 3位 +每天中时分钟 H时i分【4位】 +自增数6【位】 --长度15位
    //          按年月日的 分或秒~~~~~~~~~~~~~直观年月日
    //          64 一秒1  0000个 年【2位】+ 日期[月日] 4位 +每天中第几秒钟 一天中的第几秒   0-86400【5位】+自增数5【位】 --长度16位
    //          128 一分钟100 0000个 年【2位】+ 日期[月日] 4位 ++每天中时分钟 H时i分【4位】 +自增数6【位】 --长度16位
//    public static $primaryKeyValType = 1;

    // 常量 默认的排序字段数组 ['id' => 'desc']--默认 或 ['sort_num' => 'desc', 'id' => 'desc'];
    // 其它具体的类可以在自己的类中 继承或 重写此常量 -- 只对外提供使用
     const ORDER_BY = ['sec_total' => 'asc', 'id' => 'desc'];// ['sort_num' => 'desc', 'id' => 'desc'];// ['id' => 'desc'];

    /**
     * 关联到模型的数据表
     *
     * @var string
     */

    protected $table = 'company_expire';

    // 年
    public static $yearNumArr = [
        '0' => '0年',
//        '1' => '1年',
//        '2' => '2年',
    ];

    // 月
    public static $monthNumArr = [
        '0' => '0月',
        '1' => '1月',
        '2' => '2月',
        '3' => '3月',
        '4' => '4月',
        '5' => '5月',
        '6' => '6月',
        '7' => '7月',
        '8' => '8月',
        '9' => '9月',
        '10' => '10月',
        '11' => '11月',
    ];

    // 日
    public static $dayNumArr = [
        '0' => '0天',
        '1' => '1天',
        '2' => '2天',
        '3' => '3天',
        '4' => '4天',
        '5' => '5天',
        '6' => '6天',
        '7' => '7天',
        '8' => '8天',
        '9' => '9天',
        '10' => '10天',
        '11' => '11天',
        '12' => '12天',
        '13' => '13天',
        '14' => '14天',
        '15' => '15天',
        '16' => '16天',
        '17' => '17天',
        '18' => '18天',
        '19' => '19天',
        '20' => '20天',
        '21' => '21天',
        '22' => '22天',
        '23' => '23天',
        '24' => '24天',
        '25' => '25天',
        '26' => '26天',
        '27' => '27天',
        '28' => '28天',
        '29' => '29天',
       //  '30' => '30天',
    ];

    // 时
    public static $hourNumArr = [
        '0' => '0小时',
        '1' => '1小时',
        '2' => '2小时',
        '3' => '3小时',
        '4' => '4小时',
        '5' => '5小时',
        '6' => '6小时',
        '7' => '7小时',
        '8' => '8小时',
        '9' => '9小时',
        '10' => '10小时',
        '11' => '11小时',
        '12' => '12小时',
        '13' => '13小时',
        '14' => '14小时',
        '15' => '15小时',
        '16' => '16小时',
        '17' => '17小时',
        '18' => '18小时',
        '19' => '19小时',
        '20' => '20小时',
        '21' => '21小时',
        '22' => '22小时',
        '23' => '23小时',
    ];

    // 分
    public static $minNumArr = [
        '0' => '0分钟',
        '1' => '1分钟',
        '2' => '2分钟',
        '3' => '3分钟',
        '4' => '4分钟',
        '5' => '5分钟',
        '6' => '6分钟',
        '7' => '7分钟',
        '8' => '8分钟',
        '9' => '9分钟',
        '10' => '10分钟',
        '11' => '11分钟',
        '12' => '12分钟',
        '13' => '13分钟',
        '14' => '14分钟',
        '15' => '15分钟',
        '16' => '16分钟',
        '17' => '17分钟',
        '18' => '18分钟',
        '19' => '19分钟',
        '20' => '20分钟',
        '21' => '21分钟',
        '22' => '22分钟',
        '23' => '23分钟',
        '24' => '24分钟',
        '25' => '25分钟',
        '26' => '26分钟',
        '27' => '27分钟',
        '28' => '28分钟',
        '29' => '29分钟',
        '30' => '30分钟',
        '31' => '31分钟',
        '32' => '32分钟',
        '33' => '33分钟',
        '34' => '34分钟',
        '35' => '35分钟',
        '36' => '36分钟',
        '37' => '37分钟',
        '38' => '38分钟',
        '39' => '39分钟',
        '40' => '40分钟',
        '41' => '41分钟',
        '42' => '42分钟',
        '43' => '43分钟',
        '44' => '44分钟',
        '45' => '45分钟',
        '46' => '46分钟',
        '47' => '47分钟',
        '48' => '48分钟',
        '49' => '49分钟',
        '50' => '50分钟',
        '51' => '51分钟',
        '52' => '52分钟',
        '53' => '53分钟',
        '54' => '54分钟',
        '55' => '55分钟',
        '56' => '56分钟',
        '57' => '57分钟',
        '58' => '58分钟',
        '59' => '59分钟',
    ];

    // 秒
    public static $secNumArr = [
        '0' => '0秒',
        '1' => '1秒',
        '2' => '2秒',
        '3' => '3秒',
        '4' => '4秒',
        '5' => '5秒',
        '6' => '6秒',
        '7' => '7秒',
        '8' => '8秒',
        '9' => '9秒',
        '10' => '10秒',
        '11' => '11秒',
        '12' => '12秒',
        '13' => '13秒',
        '14' => '14秒',
        '15' => '15秒',
        '16' => '16秒',
        '17' => '17秒',
        '18' => '18秒',
        '19' => '19秒',
        '20' => '20秒',
        '21' => '21秒',
        '22' => '22秒',
        '23' => '23秒',
        '24' => '24秒',
        '25' => '25秒',
        '26' => '26秒',
        '27' => '27秒',
        '28' => '28秒',
        '29' => '29秒',
        '30' => '30秒',
        '31' => '31秒',
        '32' => '32秒',
        '33' => '33秒',
        '34' => '34秒',
        '35' => '35秒',
        '36' => '36秒',
        '37' => '37秒',
        '38' => '38秒',
        '39' => '39秒',
        '40' => '40秒',
        '41' => '41秒',
        '42' => '42秒',
        '43' => '43秒',
        '44' => '44秒',
        '45' => '45秒',
        '46' => '46秒',
        '47' => '47秒',
        '48' => '48秒',
        '49' => '49秒',
        '50' => '50秒',
        '51' => '51秒',
        '52' => '52秒',
        '53' => '53秒',
        '54' => '54秒',
        '55' => '55秒',
        '56' => '56秒',
        '57' => '57秒',
        '58' => '58秒',
        '59' => '59秒',
    ];

    // 表里没有的字段
    protected $appends = ['year_num_text', 'month_num_text', 'day_num_text', 'hour_num_text', 'min_num_text', 'sec_num_text'];

    /**
     * 获取年文字
     *
     * @return string
     */
    public function getYearNumTextAttribute()
    {
        return static::$yearNumArr[$this->year_num] ?? '';
    }

    /**
     * 获取月文字
     *
     * @return string
     */
    public function getMonthNumTextAttribute()
    {
        return static::$monthNumArr[$this->month_num] ?? '';
    }
    /**
     * 获取日文字
     *
     * @return string
     */
    public function getDayNumTextAttribute()
    {
        return static::$dayNumArr[$this->day_num] ?? '';
    }

    /**
     * 获取时文字
     *
     * @return string
     */
    public function getHourNumTextAttribute()
    {
        return static::$hourNumArr[$this->hour_num] ?? '';
    }

    /**
     * 获取分文字
     *
     * @return string
     */
    public function getMinNumTextAttribute()
    {
        return static::$minNumArr[$this->min_num] ?? '';
    }

    /**
     * 获取秒文字
     *
     * @return string
     */
    public function getSecNumTextAttribute()
    {
        return static::$secNumArr[$this->sec_num] ?? '';
    }

}
